@inherits UmbracoViewPage<SiteBuilderBaseViewModel>
@using USNSiteBuilder.Core.Models
@using Microsoft.Extensions.Options
@inject IOptions<USNAppSettings> _appSettings
@{
    Usnstyle websiteStyle = (Usnstyle)Model.WebsiteStyle;
    UsnglobalSettings globalSettings = (UsnglobalSettings)Model.GlobalSettings;

    string logoClass = !Model.Value<bool>("overrideWebsiteLogo") ? (websiteStyle.WebsiteLogo == null ? "class=\"no-image\"" : String.Empty) : (Model.Value<IPublishedContent>("websiteLogoOverride") == null ? "class=\"no-image\"" : String.Empty);
    string websiteName = !Model.Value<bool>("overrideWebsiteLogo") ? globalSettings.WebsiteName : Model.Value<string>("logoTextOverride");
    IPublishedContent websiteLogo = !Model.Value<bool>("overrideWebsiteLogo") ? websiteStyle.WebsiteLogo : Model.Value<IPublishedContent>("websiteLogoOverride");

    <div id="logo" @Html.Raw(logoClass)>
        <a href="@Model.Root().Url()" title="@websiteName">
            @if (websiteLogo != null)
            {
                if (websiteLogo.Value<string>("umbracoExtension") != "svg")
                {
                    bool webPEnabled = _appSettings.Value.WebPEnabled;
                    <picture>
                        @if (webPEnabled)
                        {
                            <source type="image/webp" data-srcset="@(websiteLogo.Url())?format=webp">
                        }
                        <img src="@websiteLogo.Url()" alt="@(websiteLogo.Value<string>("alternativeText"))">
                    </picture>
                }
                else
                {
                    <img src="@websiteLogo.Url()" alt="@(websiteLogo.Value<string>("alternativeText"))">
                }
            }
            <span>@websiteName</span>
        </a>
    </div>
}

