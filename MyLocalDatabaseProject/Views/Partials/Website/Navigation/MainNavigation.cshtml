@inherits UmbracoViewPage<SiteBuilderBaseViewModel>
@using USNSiteBuilder.Core.Models
@using USNSiteBuilder.Core.Interfaces
@inject ISiteBuilderService _siteBuilderService
@{
    Usnnavigation navigation = (Usnnavigation)Model.Navigation;
    Usnstyle websiteStyle = (Usnstyle)Model.WebsiteStyle;
    int navColumnsBreakPoint = websiteStyle.StyleSpacing.mainNavMultiColumnItems;

    if (navigation != null && navigation.MainNavigation != null && navigation.MainNavigation.Any())
    {
        <nav aria-label="@Umbraco.GetDictionaryValue("USN Aria Main")" class="main nav-dropdown @websiteStyle.StyleColors.navDropdownBackgroundClass">
            @{Pages(navigation.MainNavigation, String.Empty, navColumnsBreakPoint); }
        </nav>
    }
}

@{
    void Pages(IEnumerable<SiteBuilderNavItem> pages, string multiColumnStyle, int navColumnsBreakPoint)
    {
        if (pages != null)
        {
            bool hasSubPages = false;

            <ul @Html.Raw(multiColumnStyle)>
                @foreach (var link in pages)
                {
                    if (_siteBuilderService.DisplayLink(link))
                    {
                        //CONVERT # TO void if present
                        string linkURL = link.link.LinkUrl.Trim() == "#" ? "javascript:void(0);" : link.link.LinkUrl;

                        string selected = CheckSelected(link) ? "active" : String.Empty;

                        string subPageClass = String.Empty;

                        if (link.subPages != null && link.subPages.Any())
                        {
                            multiColumnStyle = link.subPages.Count() > navColumnsBreakPoint ? " class=\"multi-col\"" : String.Empty;

                            subPageClass = String.Format(" class=\"has-child {0}\"", selected);
                            hasSubPages = true;
                        }
                        else
                        {
                            subPageClass = String.Format(" class=\"no-child {0}\"", selected);
                        }

                        <li @Html.Raw(subPageClass)>
                            <span>
                                <a href="@link.link.LinkUrl" @Html.Raw(link.link.LinkTarget) @Html.Raw(link.link.LinkTitle)>@Html.Raw(link.icon)@Html.Raw(link.link.LinkText)@Html.Raw(link.link.LinkTargetIcon)</a>
                            </span>

                            @if (hasSubPages)
                            {
                                <button class="expand-subpages" type="button" aria-expanded="false" aria-label="@Umbraco.GetDictionaryValue("USN Aria Expand Sub Pages") @Html.Raw(link.link.LinkText)">
                                    <span aria-hidden="true">@Umbraco.GetDictionaryValue("USN Aria Expand Sub Pages") @Html.Raw(link.link.LinkText)</span>
                                </button>

                                Pages(link.subPages, multiColumnStyle, navColumnsBreakPoint);
                            }
                        </li>
                    }
                }
            </ul>
        }
    }
}

@functions{

    private bool CheckSelected(SiteBuilderNavItem currentLink)
    {
        bool output = false;

        //Highlight parent for blog pages except home page if on main navigation.
        if (Model.IsDocumentType(UsnblogPost.ModelTypeAlias) && (currentLink.link.ID != Model.HomeNode.Id))
        {
            output = Array.IndexOf(Model.Path.Split(','), currentLink.link.ID.ToString()) >= 0 ? true : false;
        }
        else
        {
            //current link is current page so must be selected
            if (currentLink.link.ID == Model.Id)
                output = true;
            //if current link has children
            else if (currentLink.subPages != null && currentLink.subPages.Any())
            {
                foreach (var link in currentLink.subPages)
                {
                    //if child link == current page , parent must be selected
                    if (Model.Id == link.link.ID)
                    {
                        output = true;
                        break;
                    }
                    //if child link has children do recursive check
                    else if (link.subPages != null && link.subPages.Any())
                    {
                        output = CheckSelected(link);
                        if (output)
                            break;
                    }
                }
            }
        }

        return output;
    }
}
